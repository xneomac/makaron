#!/usr/bin/env python

import argparse, re

version_filename = 'setup.py'

def increase_version(version, index):
    version[index] = str(int(version[index]) + 1)
    return version

if __name__ == '__main__':

    try:
        parser = argparse.ArgumentParser(prog='kooki')
        parser.add_argument('verb', nargs='*')
        args = parser.parse_args()

        with open(version_filename, 'r') as stream:
            content_read = stream.read()

            m = re.search('__version__.*\n', content_read)

            if (m):
                version_line = m.group(0)
            else:
                raise Exception('No version found')

            exec(version_line)
            version_splitted = __version__.split('.')

            if 'major' in args.verb:
                version_splitted = increase_version(version_splitted, 0)

            if 'minor' in args.verb:
                version_splitted = increase_version(version_splitted, 1)

            if 'patch' in args.verb:
                version_splitted = increase_version(version_splitted, 2)

            __new_version__ = '.'.join(version_splitted)


            if (__version__ == __new_version__):
                print(__version__)
            else:
                print(__version__, ' -> ', __new_version__)

                old_str = '__version__ = \'{0}\''.format(__version__)
                new_str = '__version__ = \'{0}\''.format(__new_version__)

                confirm = input('confirm [y/n] (y): ')

                if confirm == 'y' or confirm == '':
                    content_read = content_read.replace(old_str, new_str)
                    with open(version_filename, 'w') as write_stream:
                        write_stream.write(content_read)
                elif confirm == 'n':
                    pass
                else:
                    print('bad response')


    except Exception as e:
        print(e)

    except (KeyboardInterrupt, SystemExit):
        pass
